{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithRedirect","SignOut","currentUser","signOut","ChatRoom","props","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","dummy","useRef","sendMessage","e","a","preventDefault","uid","photoURL","add","name","displayName","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","messageClass","className","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAaAA,IAASC,cATc,CACrBC,OAAQC,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmBJ,eACnBK,MAAOL,8CAKMH,QAAf,E,iCCDMS,G,MAAOT,EAASS,QAChBC,EAAYV,EAASU,YAe3B,SAASC,IAML,OACI,8BACI,wBAAQC,QAPS,WACrB,IAAMC,EAAW,IAAIb,EAASS,KAAKK,mBACnCd,EAASS,OAAOM,mBAAmBF,IAK/B,4BAKZ,SAASG,IACL,OACIP,EAAKQ,aACD,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,oBAKZ,SAASC,EAASC,GACd,IAAMC,EAAcX,EAAUY,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAFhC,EAGFC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAHc,sBAIaC,mBAAS,IAJtB,mBAIdC,EAJc,KAIHC,EAJG,KAKfC,EAAQC,mBAERC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBD,EAAEE,iBADc,EAEU5B,EAAKQ,YAAvBqB,EAFQ,EAERA,IAAKC,EAFG,EAEHA,SAFG,SAGVlB,EAAYmB,IAAI,CAClBC,KAAMhC,EAAKQ,YAAYyB,YACvBC,KAAMb,EACNc,UAAW5C,EAASU,UAAUmC,WAAWC,kBACzCR,MACAC,aARY,OAUhBR,EAAa,IAEbC,EAAMe,QAAQC,eAAe,CAAEC,SAAU,WAZzB,2CAAH,sDAejB,OACI,gCACI,iCACKrB,GACGA,EAASsB,KAAI,SAACC,GAAD,OACT,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAE9B,qBAAKC,IAAKvB,OAGd,uBAAMwB,SAAUtB,EAAhB,UACI,uBACIuB,MAAO3B,EACP4B,SAAU,SAACvB,GAAD,OAAOJ,EAAaI,EAAEwB,OAAOF,QACvCG,YAAY,sBAEhB,wBAAQC,KAAK,SAAb,SACI,cAAC,IAAD,YAOpB,SAAST,EAAYhC,GAAQ,IAAD,EACIA,EAAMiC,QAA1BZ,EADgB,EAChBA,KAAME,EADU,EACVA,KACRmB,EAFkB,EACJxB,MACS7B,EAAKQ,YAAYqB,IAAM,OAAS,WAC7D,OACI,sBAAKyB,UAAS,kBAAaD,GAA3B,UACI,mBAAGC,UAAU,eAAb,SAA6BpB,IAC7B,mBAAGoB,UAAU,WAAb,SAAyBtB,OAKtBuB,MA3Ff,WAAgB,IAAD,EACIC,YAAaxD,GAArByD,EADI,oBAEX,OACI,sBAAKH,UAAU,MAAf,UACI,mCACI,qCACA,cAAC/C,EAAD,OAEJ,kCAAUkD,EAAO,cAAC/C,EAAD,IAAe,cAACR,EAAD,UCb7BwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c558cad4.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: \"messaging-app-39c45.firebaseapp.com\",\n  projectId: \"messaging-app-39c45\",\n  storageBucket: \"messaging-app-39c45.appspot.com\",\n  messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\n  appId: process.env.REACT_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { useState, useRef } from \"react\";\nimport firebase from \"./firebase\";\n\n// Hooks\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\n// Icons\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\n\n// CSS\nimport \"./App.css\";\n\n// Global\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n    const [user] = useAuthState(auth);\n    return (\n        <div className=\"app\">\n            <header>\n                <h1>Zim</h1>\n                <SignOut />\n            </header>\n            <section>{user ? <ChatRoom /> : <SignIn />}</section>\n        </div>\n    );\n}\n\nfunction SignIn() {\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        firebase.auth().signInWithRedirect(provider);\n    };\n\n    return (\n        <div>\n            <button onClick={signInWithGoogle}>Google login</button>\n        </div>\n    );\n}\n\nfunction SignOut() {\n    return (\n        auth.currentUser && (\n            <button onClick={() => auth.signOut()}>logout</button>\n        )\n    );\n}\n\nfunction ChatRoom(props) {\n    const messagesRef = firestore.collection(\"messages\");\n    const query = messagesRef.orderBy(\"createdAt\").limit(25);\n    const [messages] = useCollectionData(query, { idField: \"id\" });\n    const [formValue, setFormValue] = useState(\"\");\n    const dummy = useRef();\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n        const { uid, photoURL } = auth.currentUser;\n        await messagesRef.add({\n            name: auth.currentUser.displayName,\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL,\n        });\n        setFormValue(\"\");\n\n        dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    return (\n        <div>\n            <main>\n                {messages &&\n                    messages.map((msg) => (\n                        <ChatMessage key={msg.id} message={msg} />\n                    ))}\n                <div ref={dummy}>{}</div>\n            </main>\n\n            <form onSubmit={sendMessage}>\n                <input\n                    value={formValue}\n                    onChange={(e) => setFormValue(e.target.value)}\n                    placeholder=\"...type something\"\n                />\n                <button type=\"submit\">\n                    <ArrowUpwardIcon />\n                </button>\n            </form>\n        </div>\n    );\n}\n\nfunction ChatMessage(props) {\n    const { name, text, uid } = props.message;\n    const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n    return (\n        <div className={`message ${messageClass}`}>\n            <p className=\"user-message\">{text}</p>\n            <p className=\"username\">{name}</p>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}